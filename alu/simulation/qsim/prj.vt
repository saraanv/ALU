// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/05/2025 13:19:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    prj
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module prj_vlg_sample_tst(
	A,
	ALUOp,
	B,
	sampler_tx
);
input [7:0] A;
input [2:0] ALUOp;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or ALUOp or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module prj_vlg_check_tst (
	Result,
	div_result,
	mul_result,
	sampler_rx
);
input [7:0] Result;
input [7:0] div_result;
input [15:0] mul_result;
input sampler_rx;

reg [7:0] Result_expected;
reg [7:0] div_result_expected;
reg [15:0] mul_result_expected;

reg [7:0] Result_prev;
reg [7:0] div_result_prev;
reg [15:0] mul_result_prev;

reg [7:0] Result_expected_prev;
reg [7:0] div_result_expected_prev;
reg [15:0] mul_result_expected_prev;

reg [7:0] last_Result_exp;
reg [7:0] last_div_result_exp;
reg [15:0] last_mul_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Result_prev = Result;
	div_result_prev = div_result;
	mul_result_prev = mul_result;
end

// update expected /o prevs

always @(trigger)
begin
	Result_expected_prev = Result_expected;
	div_result_expected_prev = div_result_expected;
	mul_result_expected_prev = mul_result_expected;
end


// expected Result[ 7 ]
initial
begin
	Result_expected[7] = 1'bX;
end 
// expected Result[ 6 ]
initial
begin
	Result_expected[6] = 1'bX;
end 
// expected Result[ 5 ]
initial
begin
	Result_expected[5] = 1'bX;
end 
// expected Result[ 4 ]
initial
begin
	Result_expected[4] = 1'bX;
end 
// expected Result[ 3 ]
initial
begin
	Result_expected[3] = 1'bX;
end 
// expected Result[ 2 ]
initial
begin
	Result_expected[2] = 1'bX;
end 
// expected Result[ 1 ]
initial
begin
	Result_expected[1] = 1'bX;
end 
// expected Result[ 0 ]
initial
begin
	Result_expected[0] = 1'bX;
end 
// expected div_result[ 7 ]
initial
begin
	div_result_expected[7] = 1'bX;
end 
// expected div_result[ 6 ]
initial
begin
	div_result_expected[6] = 1'bX;
end 
// expected div_result[ 5 ]
initial
begin
	div_result_expected[5] = 1'bX;
end 
// expected div_result[ 4 ]
initial
begin
	div_result_expected[4] = 1'bX;
end 
// expected div_result[ 3 ]
initial
begin
	div_result_expected[3] = 1'bX;
end 
// expected div_result[ 2 ]
initial
begin
	div_result_expected[2] = 1'bX;
end 
// expected div_result[ 1 ]
initial
begin
	div_result_expected[1] = 1'bX;
end 
// expected div_result[ 0 ]
initial
begin
	div_result_expected[0] = 1'bX;
end 
// expected mul_result[ 15 ]
initial
begin
	mul_result_expected[15] = 1'bX;
end 
// expected mul_result[ 14 ]
initial
begin
	mul_result_expected[14] = 1'bX;
end 
// expected mul_result[ 13 ]
initial
begin
	mul_result_expected[13] = 1'bX;
end 
// expected mul_result[ 12 ]
initial
begin
	mul_result_expected[12] = 1'bX;
end 
// expected mul_result[ 11 ]
initial
begin
	mul_result_expected[11] = 1'bX;
end 
// expected mul_result[ 10 ]
initial
begin
	mul_result_expected[10] = 1'bX;
end 
// expected mul_result[ 9 ]
initial
begin
	mul_result_expected[9] = 1'bX;
end 
// expected mul_result[ 8 ]
initial
begin
	mul_result_expected[8] = 1'bX;
end 
// expected mul_result[ 7 ]
initial
begin
	mul_result_expected[7] = 1'bX;
end 
// expected mul_result[ 6 ]
initial
begin
	mul_result_expected[6] = 1'bX;
end 
// expected mul_result[ 5 ]
initial
begin
	mul_result_expected[5] = 1'bX;
end 
// expected mul_result[ 4 ]
initial
begin
	mul_result_expected[4] = 1'bX;
end 
// expected mul_result[ 3 ]
initial
begin
	mul_result_expected[3] = 1'bX;
end 
// expected mul_result[ 2 ]
initial
begin
	mul_result_expected[2] = 1'bX;
end 
// expected mul_result[ 1 ]
initial
begin
	mul_result_expected[1] = 1'bX;
end 
// expected mul_result[ 0 ]
initial
begin
	mul_result_expected[0] = 1'bX;
end 
// generate trigger
always @(Result_expected or Result or div_result_expected or div_result or mul_result_expected or mul_result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Result = %b | expected div_result = %b | expected mul_result = %b | ",Result_expected_prev,div_result_expected_prev,mul_result_expected_prev);
	$display("| real Result = %b | real div_result = %b | real mul_result = %b | ",Result_prev,div_result_prev,mul_result_prev);
`endif
	if (
		( Result_expected_prev[0] !== 1'bx ) && ( Result_prev[0] !== Result_expected_prev[0] )
		&& ((Result_expected_prev[0] !== last_Result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[0] = Result_expected_prev[0];
	end
	if (
		( Result_expected_prev[1] !== 1'bx ) && ( Result_prev[1] !== Result_expected_prev[1] )
		&& ((Result_expected_prev[1] !== last_Result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[1] = Result_expected_prev[1];
	end
	if (
		( Result_expected_prev[2] !== 1'bx ) && ( Result_prev[2] !== Result_expected_prev[2] )
		&& ((Result_expected_prev[2] !== last_Result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[2] = Result_expected_prev[2];
	end
	if (
		( Result_expected_prev[3] !== 1'bx ) && ( Result_prev[3] !== Result_expected_prev[3] )
		&& ((Result_expected_prev[3] !== last_Result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[3] = Result_expected_prev[3];
	end
	if (
		( Result_expected_prev[4] !== 1'bx ) && ( Result_prev[4] !== Result_expected_prev[4] )
		&& ((Result_expected_prev[4] !== last_Result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[4] = Result_expected_prev[4];
	end
	if (
		( Result_expected_prev[5] !== 1'bx ) && ( Result_prev[5] !== Result_expected_prev[5] )
		&& ((Result_expected_prev[5] !== last_Result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[5] = Result_expected_prev[5];
	end
	if (
		( Result_expected_prev[6] !== 1'bx ) && ( Result_prev[6] !== Result_expected_prev[6] )
		&& ((Result_expected_prev[6] !== last_Result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[6] = Result_expected_prev[6];
	end
	if (
		( Result_expected_prev[7] !== 1'bx ) && ( Result_prev[7] !== Result_expected_prev[7] )
		&& ((Result_expected_prev[7] !== last_Result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Result_exp[7] = Result_expected_prev[7];
	end
	if (
		( div_result_expected_prev[0] !== 1'bx ) && ( div_result_prev[0] !== div_result_expected_prev[0] )
		&& ((div_result_expected_prev[0] !== last_div_result_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[0] = div_result_expected_prev[0];
	end
	if (
		( div_result_expected_prev[1] !== 1'bx ) && ( div_result_prev[1] !== div_result_expected_prev[1] )
		&& ((div_result_expected_prev[1] !== last_div_result_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[1] = div_result_expected_prev[1];
	end
	if (
		( div_result_expected_prev[2] !== 1'bx ) && ( div_result_prev[2] !== div_result_expected_prev[2] )
		&& ((div_result_expected_prev[2] !== last_div_result_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[2] = div_result_expected_prev[2];
	end
	if (
		( div_result_expected_prev[3] !== 1'bx ) && ( div_result_prev[3] !== div_result_expected_prev[3] )
		&& ((div_result_expected_prev[3] !== last_div_result_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[3] = div_result_expected_prev[3];
	end
	if (
		( div_result_expected_prev[4] !== 1'bx ) && ( div_result_prev[4] !== div_result_expected_prev[4] )
		&& ((div_result_expected_prev[4] !== last_div_result_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[4] = div_result_expected_prev[4];
	end
	if (
		( div_result_expected_prev[5] !== 1'bx ) && ( div_result_prev[5] !== div_result_expected_prev[5] )
		&& ((div_result_expected_prev[5] !== last_div_result_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[5] = div_result_expected_prev[5];
	end
	if (
		( div_result_expected_prev[6] !== 1'bx ) && ( div_result_prev[6] !== div_result_expected_prev[6] )
		&& ((div_result_expected_prev[6] !== last_div_result_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[6] = div_result_expected_prev[6];
	end
	if (
		( div_result_expected_prev[7] !== 1'bx ) && ( div_result_prev[7] !== div_result_expected_prev[7] )
		&& ((div_result_expected_prev[7] !== last_div_result_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port div_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", div_result_expected_prev);
		$display ("     Real value = %b", div_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_div_result_exp[7] = div_result_expected_prev[7];
	end
	if (
		( mul_result_expected_prev[0] !== 1'bx ) && ( mul_result_prev[0] !== mul_result_expected_prev[0] )
		&& ((mul_result_expected_prev[0] !== last_mul_result_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[0] = mul_result_expected_prev[0];
	end
	if (
		( mul_result_expected_prev[1] !== 1'bx ) && ( mul_result_prev[1] !== mul_result_expected_prev[1] )
		&& ((mul_result_expected_prev[1] !== last_mul_result_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[1] = mul_result_expected_prev[1];
	end
	if (
		( mul_result_expected_prev[2] !== 1'bx ) && ( mul_result_prev[2] !== mul_result_expected_prev[2] )
		&& ((mul_result_expected_prev[2] !== last_mul_result_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[2] = mul_result_expected_prev[2];
	end
	if (
		( mul_result_expected_prev[3] !== 1'bx ) && ( mul_result_prev[3] !== mul_result_expected_prev[3] )
		&& ((mul_result_expected_prev[3] !== last_mul_result_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[3] = mul_result_expected_prev[3];
	end
	if (
		( mul_result_expected_prev[4] !== 1'bx ) && ( mul_result_prev[4] !== mul_result_expected_prev[4] )
		&& ((mul_result_expected_prev[4] !== last_mul_result_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[4] = mul_result_expected_prev[4];
	end
	if (
		( mul_result_expected_prev[5] !== 1'bx ) && ( mul_result_prev[5] !== mul_result_expected_prev[5] )
		&& ((mul_result_expected_prev[5] !== last_mul_result_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[5] = mul_result_expected_prev[5];
	end
	if (
		( mul_result_expected_prev[6] !== 1'bx ) && ( mul_result_prev[6] !== mul_result_expected_prev[6] )
		&& ((mul_result_expected_prev[6] !== last_mul_result_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[6] = mul_result_expected_prev[6];
	end
	if (
		( mul_result_expected_prev[7] !== 1'bx ) && ( mul_result_prev[7] !== mul_result_expected_prev[7] )
		&& ((mul_result_expected_prev[7] !== last_mul_result_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[7] = mul_result_expected_prev[7];
	end
	if (
		( mul_result_expected_prev[8] !== 1'bx ) && ( mul_result_prev[8] !== mul_result_expected_prev[8] )
		&& ((mul_result_expected_prev[8] !== last_mul_result_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[8] = mul_result_expected_prev[8];
	end
	if (
		( mul_result_expected_prev[9] !== 1'bx ) && ( mul_result_prev[9] !== mul_result_expected_prev[9] )
		&& ((mul_result_expected_prev[9] !== last_mul_result_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[9] = mul_result_expected_prev[9];
	end
	if (
		( mul_result_expected_prev[10] !== 1'bx ) && ( mul_result_prev[10] !== mul_result_expected_prev[10] )
		&& ((mul_result_expected_prev[10] !== last_mul_result_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[10] = mul_result_expected_prev[10];
	end
	if (
		( mul_result_expected_prev[11] !== 1'bx ) && ( mul_result_prev[11] !== mul_result_expected_prev[11] )
		&& ((mul_result_expected_prev[11] !== last_mul_result_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[11] = mul_result_expected_prev[11];
	end
	if (
		( mul_result_expected_prev[12] !== 1'bx ) && ( mul_result_prev[12] !== mul_result_expected_prev[12] )
		&& ((mul_result_expected_prev[12] !== last_mul_result_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[12] = mul_result_expected_prev[12];
	end
	if (
		( mul_result_expected_prev[13] !== 1'bx ) && ( mul_result_prev[13] !== mul_result_expected_prev[13] )
		&& ((mul_result_expected_prev[13] !== last_mul_result_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[13] = mul_result_expected_prev[13];
	end
	if (
		( mul_result_expected_prev[14] !== 1'bx ) && ( mul_result_prev[14] !== mul_result_expected_prev[14] )
		&& ((mul_result_expected_prev[14] !== last_mul_result_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[14] = mul_result_expected_prev[14];
	end
	if (
		( mul_result_expected_prev[15] !== 1'bx ) && ( mul_result_prev[15] !== mul_result_expected_prev[15] )
		&& ((mul_result_expected_prev[15] !== last_mul_result_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mul_result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mul_result_expected_prev);
		$display ("     Real value = %b", mul_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mul_result_exp[15] = mul_result_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module prj_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [2:0] ALUOp;
reg [7:0] B;
// wires                                               
wire [7:0] Result;
wire [7:0] div_result;
wire [15:0] mul_result;

wire sampler;                             

// assign statements (if any)                          
prj i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALUOp(ALUOp),
	.B(B),
	.Result(Result),
	.div_result(div_result),
	.mul_result(mul_result)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #80000 1'b0;
end 
// ALUOp[ 2 ]
initial
begin
	ALUOp[2] = 1'b0;
end 
// ALUOp[ 1 ]
initial
begin
	ALUOp[1] = 1'b0;
end 
// ALUOp[ 0 ]
initial
begin
	ALUOp[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #80000 1'b0;
end 

prj_vlg_sample_tst tb_sample (
	.A(A),
	.ALUOp(ALUOp),
	.B(B),
	.sampler_tx(sampler)
);

prj_vlg_check_tst tb_out(
	.Result(Result),
	.div_result(div_result),
	.mul_result(mul_result),
	.sampler_rx(sampler)
);
endmodule

